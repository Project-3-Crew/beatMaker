{"ast":null,"code":"import { gql } from '@apollo/client';\nexport const QUERY_USER = gql`\n  query user($username: String!) {\n    user(username: $username) {\n      _id\n      username\n      email\n      thoughts {\n        _id\n        thoughtText\n        createdAt\n      }\n    }\n  }\n`;\nexport const QUERY_THOUGHTS = gql`\n  query getThoughts {\n    thoughts {\n      _id\n      thoughtText\n      thoughtAuthor\n      createdAt\n    }\n  }\n`;\nexport const QUERY_SINGLE_THOUGHT = gql`\n  query getSingleThought($thoughtId: ID!) {\n    thought(thoughtId: $thoughtId) {\n      _id\n      thoughtText\n      thoughtAuthor\n      createdAt\n      comments {\n        _id\n        commentText\n        commentAuthor\n        createdAt\n      }\n    }\n  }\n`;\nexport const QUERY_BEATS = gql`\n  query getbeats {\n    beats {\n      _id\n      beatText\n      beatAuthor\n      createdAt\n    }\n  }\n`;\nexport const QUERY_SINGLE_BEAT = gql`\n  query getSingleBeat($beatId: ID!) {\n    beat(beatId: $beatId) {\n      _id\n      beatText\n      beatAuthor\n      createdAt\n      comments {\n        _id\n        commentText\n        commentAuthor\n        createdAt\n      }\n    }\n  }\n`;\nexport const QUERY_ME = gql`\n  query me {\n    me {\n      _id\n      username\n      email\n      beats {\n        _id\n        beatText\n        beatAuthor\n        createdAt\n      }\n      thoughts {\n        _id\n        thoughtText\n        thoughtAuthor\n        createdAt\n      }\n    }\n  }\n`;","map":{"version":3,"sources":["C:/Users/Kinga/beatMaker/client/src/utils/queries.js"],"names":["gql","QUERY_USER","QUERY_THOUGHTS","QUERY_SINGLE_THOUGHT","QUERY_BEATS","QUERY_SINGLE_BEAT","QUERY_ME"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB;AAEA,OAAO,MAAMC,UAAU,GAAGD,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbO;AAeP,OAAO,MAAME,cAAc,GAAGF,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATO;AAWP,OAAO,MAAMG,oBAAoB,GAAGH,GAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfO;AAgBP,OAAO,MAAMI,WAAW,GAAGJ,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATO;AAWP,OAAO,MAAMK,iBAAiB,GAAGL,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfO;AAiBP,OAAO,MAAMM,QAAQ,GAAGN,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CApBO","sourcesContent":["import { gql } from '@apollo/client';\r\n\r\nexport const QUERY_USER = gql`\r\n  query user($username: String!) {\r\n    user(username: $username) {\r\n      _id\r\n      username\r\n      email\r\n      thoughts {\r\n        _id\r\n        thoughtText\r\n        createdAt\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_THOUGHTS = gql`\r\n  query getThoughts {\r\n    thoughts {\r\n      _id\r\n      thoughtText\r\n      thoughtAuthor\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_SINGLE_THOUGHT = gql`\r\n  query getSingleThought($thoughtId: ID!) {\r\n    thought(thoughtId: $thoughtId) {\r\n      _id\r\n      thoughtText\r\n      thoughtAuthor\r\n      createdAt\r\n      comments {\r\n        _id\r\n        commentText\r\n        commentAuthor\r\n        createdAt\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const QUERY_BEATS = gql`\r\n  query getbeats {\r\n    beats {\r\n      _id\r\n      beatText\r\n      beatAuthor\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_SINGLE_BEAT = gql`\r\n  query getSingleBeat($beatId: ID!) {\r\n    beat(beatId: $beatId) {\r\n      _id\r\n      beatText\r\n      beatAuthor\r\n      createdAt\r\n      comments {\r\n        _id\r\n        commentText\r\n        commentAuthor\r\n        createdAt\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_ME = gql`\r\n  query me {\r\n    me {\r\n      _id\r\n      username\r\n      email\r\n      beats {\r\n        _id\r\n        beatText\r\n        beatAuthor\r\n        createdAt\r\n      }\r\n      thoughts {\r\n        _id\r\n        thoughtText\r\n        thoughtAuthor\r\n        createdAt\r\n      }\r\n    }\r\n  }\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}